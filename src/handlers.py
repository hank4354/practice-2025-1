import re
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler

from book_manager import BookManager
from keyboards import (
    get_rating_keyboard, 
    get_confirm_keyboard, 
    get_books_keyboard,
    get_back_to_list_keyboard
)
from states import TITLE, AUTHOR, YEAR, RATING, REVIEW, CONFIRM, SEARCH_QUERY

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–Ω–∏–≥
book_manager = BookManager()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_first_name = update.effective_user.first_name
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}! üìö\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏\n"
        "‚Ä¢ –°—Ç–∞–≤–∏—Ç—å –∏–º –æ—Ü–µ–Ω–∫–∏ –∏ –ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤—ã\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥\n"
        "‚Ä¢ –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å–≤–æ–∏–º –∫–Ω–∏–≥–∞–º\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ —Å–≤–æ–∏—Ö —á—Ç–µ–Ω–∏—è—Ö\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    await update.message.reply_text(
        "üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/addbook - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É\n"
        "/mybooks - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥\n"
        "/search - –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥\n"
        "/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á—Ç–µ–Ω–∏—è\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )

async def add_book_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏."""
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–Ω–∏–≥–µ
    context.user_data["book"] = {}
    
    await update.message.reply_text(
        "–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É! üìñ\n\n"
        "–ö–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É –∫–Ω–∏–≥–∏?"
    )
    return TITLE

async def add_book_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏."""
    context.user_data["book"]["title"] = update.message.text
    
    await update.message.reply_text(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {update.message.text}\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏:"
    )
    return AUTHOR

async def add_book_author(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏."""
    context.user_data["book"]["author"] = update.message.text
    
    await update.message.reply_text(
        f"–ê–≤—Ç–æ—Ä: {update.message.text}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è –∫–Ω–∏–≥–∏ (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ):"
    )
    return YEAR

async def add_book_year(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ–¥–∞ –∏–∑–¥–∞–Ω–∏—è –∫–Ω–∏–≥–∏."""
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≥–æ–¥–∞
    if not text.isdigit():
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2021)."
        )
        return YEAR
    
    year = int(text)
    if year < 0 or (year > 2100 and year != 0):
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è –∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ."
        )
        return YEAR
    
    context.user_data["book"]["year"] = year
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏
    await update.message.reply_text(
        f"–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è: {year}\n\n"
        "–ö–∞–∫—É—é –æ—Ü–µ–Ω–∫—É –≤—ã –±—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —ç—Ç–æ–π –∫–Ω–∏–≥–µ (–æ—Ç 1 –¥–æ 5):",
        reply_markup=get_rating_keyboard()
    )
    return RATING

async def add_book_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ü–µ–Ω–∫–∏ –∫–Ω–∏–≥–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–µ–Ω–∞ –ª–∏ –æ—Ü–µ–Ω–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏–∑ callback_data
        rating_data = query.data
        rating = int(rating_data.split("_")[1])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É: {'‚≠ê' * rating}")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –æ—Ü–µ–Ω–∫—É —Ç–µ–∫—Å—Ç–æ–º
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ—Ü–µ–Ω–∫–∏
        if not text.isdigit() or int(text) < 1 or int(text) > 5:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5.", 
                reply_markup=get_rating_keyboard()
            )
            return RATING
        
        rating = int(text)
        await update.message.reply_text(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É: {'‚≠ê' * rating}")
    
    context.user_data["book"]["rating"] = rating
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–∑—ã–≤—É
    if update.callback_query:
        await update.callback_query.message.reply_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–∑—ã–≤ –æ –∫–Ω–∏–≥–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤):"
        )
    else:
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–∑—ã–≤ –æ –∫–Ω–∏–≥–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤):"
        )
    return REVIEW

async def add_book_review(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞ –æ –∫–Ω–∏–≥–µ."""
    review = update.message.text
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤
    if review == "-":
        review = ""
    
    context.user_data["book"]["review"] = review
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    book = context.user_data["book"]
    
    confirmation_text = (
        "üìö –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {book['title']}\n"
        f"–ê–≤—Ç–æ—Ä: {book['author']}\n"
        f"–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è: {book['year']}\n"
        f"–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * book['rating']}\n"
    )
    
    if review:
        confirmation_text += f"–û—Ç–∑—ã–≤: {review}\n\n"
    else:
        confirmation_text += "–û—Ç–∑—ã–≤: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"
    
    confirmation_text += "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    
    await update.message.reply_text(
        confirmation_text,
        reply_markup=get_confirm_keyboard()
    )
    return CONFIRM

async def add_book_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏."""
    query = update.callback_query
    await query.answer()
    
    choice = query.data
    
    if choice == "confirm":
        book = context.user_data["book"]
        user_id = update.effective_user.id
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        book_manager.add_book(
            user_id,
            book["title"],
            book["author"],
            book["year"],
            book["rating"],
            book["review"]
        )
        
        await query.edit_message_text(
            "‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à—É –±–∏–±–ª–∏–æ—Ç–µ–∫—É!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addbook, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∫–Ω–∏–≥—É, –∏–ª–∏ "
            "/mybooks, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥."
        )
    else:
        await query.edit_message_text(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addbook, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    return ConversationHandler.END

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )
    return ConversationHandler.END

async def my_books_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥."""
    user_id = update.effective_user.id
    books = book_manager.get_user_books(user_id)
    
    if not books:
        await update.message.reply_text(
            "üìö –í–∞—à–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addbook, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–Ω–∏–≥—É!"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    context.user_data["books_list"] = books
    context.user_data["current_page"] = 0
    
    await update.message.reply_text(
        f"üìö –í–∞—à–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ ({len(books)} –∫–Ω–∏–≥):",
        reply_markup=get_books_keyboard(books, page=0)
    )

async def search_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥."""
    await update.message.reply_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –∏–º—è –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    )
    return SEARCH_QUERY

async def search_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
    user_id = update.effective_user.id
    query = update.message.text
    
    # –ü–æ–∏—Å–∫ –∫–Ω–∏–≥
    found_books = book_manager.search_books(user_id, query)
    
    if not found_books:
        await update.message.reply_text(
            f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mybooks, "
            "—á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –∫–Ω–∏–≥–∏."
        )
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        context.user_data["books_list"] = found_books
        context.user_data["current_page"] = 0
        
        await update.message.reply_text(
            f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' ({len(found_books)} –∫–Ω–∏–≥):",
            reply_markup=get_books_keyboard(found_books, page=0)
        )
    
    return ConversationHandler.END

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á—Ç–µ–Ω–∏—è."""
    user_id = update.effective_user.id
    stats = book_manager.calculate_stats(user_id)
    
    if stats["total_books"] == 0:
        await update.message.reply_text(
            "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addbook, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–Ω–∏–≥—É!"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_message = (
        "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á—Ç–µ–Ω–∏—è:\n\n"
        f"üìö –í—Å–µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –∫–Ω–∏–≥: {stats['total_books']}\n"
        f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['average_rating']}\n\n"
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ø –∫–Ω–∏–≥
    if stats["top_rated_books"]:
        stats_message += "üèÜ –ö–Ω–∏–≥–∏ —Å –Ω–∞–∏–≤—ã—Å—à–µ–π –æ—Ü–µ–Ω–∫–æ–π:\n"
        for i, book in enumerate(stats["top_rated_books"], 1):
            stats_message += f"{i}. {book['title']} - {'‚≠ê' * book['rating']}\n"
        stats_message += "\n"
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥
    if stats["recent_books"]:
        stats_message += "üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:\n"
        for i, book in enumerate(stats["recent_books"], 1):
            stats_message += f"{i}. {book['title']} - {book['author']}\n"
    
    await update.message.reply_text(stats_message)

async def book_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∫–Ω–∏–≥–∏ –∏–∑ callback_data
    book_id = int(query.data.split("_")[2])
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ
    book = book_manager.get_book_by_id(user_id, book_id)
    
    if not book:
        await query.edit_message_text("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏
    details_message = (
        f"üìñ {book['title']}\n\n"
        f"üë§ –ê–≤—Ç–æ—Ä: {book['author']}\n"
        f"üìÖ –ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è: {book['year']}\n"
        f"‚≠ê –û—Ü–µ–Ω–∫–∞: {'‚≠ê' * book['rating']}\n"
    )
    
    if book['review']:
        details_message += f"üí¨ –í–∞—à –æ—Ç–∑—ã–≤: {book['review']}\n"
    
    details_message += f"\nüìÜ –î–æ–±–∞–≤–ª–µ–Ω–æ: {book['date_added']}"
    
    await query.edit_message_text(
        details_message,
        reply_markup=get_back_to_list_keyboard()
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if data.startswith("page_"):
        page = int(data.split("_")[1])
        context.user_data["current_page"] = page
        
        books = context.user_data.get("books_list", [])
        
        await query.edit_message_text(
            f"üìö –í–∞—à–∏ –∫–Ω–∏–≥–∏:",
            reply_markup=get_books_keyboard(books, page=page)
        )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
    elif data == "back_to_list":
        books = context.user_data.get("books_list", [])
        page = context.user_data.get("current_page", 0)
        
        await query.edit_message_text(
            f"üìö –í–∞—à–∏ –∫–Ω–∏–≥–∏:",
            reply_markup=get_books_keyboard(books, page=page)
        )
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    elif data == "noop":
        pass
